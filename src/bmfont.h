///////////////////////////////////////////////////////////////////////////////
/// file:           bmfont.h
/// author:         Jacob Adkins - jpadkins
/// description:    Managed a (uthash) hash map of glyph metrics from a BMFont
///                 file (.fnt) corresponding to a bitmap glyph atlas generated
///                 by FontBuilder, Bitmap Font Generator, etc...
///////////////////////////////////////////////////////////////////////////////

#ifndef BMFONT_H
#define BMFONT_H

///////////////////////////////////////////////////////////////////////////////
/// Structs
///////////////////////////////////////////////////////////////////////////////

typedef struct bmfont_ bmfont;

typedef struct {
    struct {
        int x;
        int y;
    } position;
    struct {
        int width;
        int height;
    } size;
    struct {
        int x;
        int y;
    } offset;
} bmfont_info;

///////////////////////////////////////////////////////////////////////////////
/// @brief Returns a pointer to a new struct representing a loaded BMFont
///
/// Call this once before any calls to GlyphInfo_Get
///
/// @param file_path    Path to .fnt file
///
/// @return pointer to a new bmfont struct
///////////////////////////////////////////////////////////////////////////////
bmfont * BMFont_Create(const char *file_path);

///////////////////////////////////////////////////////////////////////////////
/// @brief Returns a pointer to a bmfont_info struct for a given glyph
///
/// @param glyph    UTF-32 value of the glyph
///
/// @return Pointer to the glyph_info struct for a glyph
///////////////////////////////////////////////////////////////////////////////
const bmfont_info * BMFont_Info(bmfont * this, int glyph);

///////////////////////////////////////////////////////////////////////////////
/// @brief Frees the memory allocated from populating
///////////////////////////////////////////////////////////////////////////////
void BMFont_Destroy(bmfont *this);

#endif
